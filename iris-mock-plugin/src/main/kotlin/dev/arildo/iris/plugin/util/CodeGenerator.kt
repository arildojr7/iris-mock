package dev.arildo.iris.plugin.util

import org.jetbrains.kotlin.descriptors.ModuleDescriptor
import org.jetbrains.kotlin.psi.KtFile
import java.io.File

/**
 * Adapted from https://github.com/square/anvil
 */
interface CodeGenerator {

    /**
     * Called multiple times in order to create new code. Note that instances should not rely on
     * being able to resolve [projectFiles] to descriptors. They should rather use the Psi APIs to
     * parse files.
     *
     * In the first round code generators are called with the files from the project. In following
     * rounds [projectFiles] represents files that were generated by code generators until no
     * code generator produces any files anymore.
     */
    fun generateCode(
        codeGenDir: File,
        module: ModuleDescriptor,
        projectFiles: Collection<KtFile>
    ): Collection<GeneratedFile>
}

/**
 * Write [content] into a new file for the given [packageName] and [fileName]. [fileName] usually
 * refers to the class name.
 */
@Suppress("unused")
fun CodeGenerator.createGeneratedFile(
    codeGenDir: File,
    packageName: String,
    fileName: String,
    content: String
): GeneratedFile {
    val directory = File(codeGenDir, packageName.replace('.', File.separatorChar))
    val file = File(directory, "$fileName.kt")
    check(file.parentFile.exists() || file.parentFile.mkdirs()) {
        "Could not generate package directory: ${file.parentFile}"
    }
    file.writeText(content)

    return GeneratedFile(file, content)
}
